//
//  Pronostico_fertilidadUITests.swift
//  Pronostico fertilidadUITests
//
//  Created by Jorge Vasquez rodriguez on 11/08/2025.
//

import XCTest

// MARK: - üß™ TESTS DE UI PRINCIPALES
final class Pronostico_fertilidadUITests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        // Configuraci√≥n inicial para cada test
        continueAfterFailure = false
        
        // Inicializar la aplicaci√≥n
        app = XCUIApplication()
        
        // Configurar argumentos de lanzamiento para testing
        app.launchArguments.append("--uitesting")
        
        // Lanzar la aplicaci√≥n
        app.launch()
        
        // Esperar a que la app est√© lista
        _ = app.wait(for: .runningForeground, timeout: 10)
    }

    override func tearDownWithError() throws {
        app = nil
    }

    // MARK: - üöÄ TEST DE LANZAMIENTO Y NAVEGACI√ìN PRINCIPAL
    
    @MainActor
    func testAppLaunch() throws {
        // Verificar que la app se lance correctamente
        XCTAssertTrue(app.state == .runningForeground, "La aplicaci√≥n deber√≠a estar ejecut√°ndose")
        
        // Verificar elementos principales de la pantalla de inicio
        let titleText = app.staticTexts["FERTILIDAD"]
        XCTAssertTrue(titleText.waitForExistence(timeout: 5), "El t√≠tulo principal debe aparecer")
        
        // Verificar que aparezcan las estad√≠sticas
        let precisionText = app.staticTexts["96.1%"]
        XCTAssertTrue(precisionText.waitForExistence(timeout: 5), "Las estad√≠sticas de precisi√≥n deben aparecer")
        
        let referencesText = app.staticTexts["1,247"]
        XCTAssertTrue(referencesText.waitForExistence(timeout: 5), "Las referencias deben aparecer")
        
        print("‚úÖ Test de lanzamiento: PAS√ì")
    }
    
    @MainActor
    func testNavigationToCalculator() throws {
        // Esperar a que aparezca el bot√≥n de calculadora
        let calculatorButton = app.buttons.containing(.staticText, identifier: "Iniciar Evaluaci√≥n").firstMatch
        
        if !calculatorButton.exists {
            // Si no existe, buscar por otros posibles identificadores
            let alternativeButton = app.buttons["Comenzar An√°lisis"]
            XCTAssertTrue(alternativeButton.waitForExistence(timeout: 10), "Debe existir un bot√≥n para iniciar la evaluaci√≥n")
            alternativeButton.tap()
        } else {
            XCTAssertTrue(calculatorButton.waitForExistence(timeout: 10), "El bot√≥n de calculadora debe aparecer")
            calculatorButton.tap()
        }
        
        // Verificar que se abre la calculadora
        let calculatorTitle = app.navigationBars.staticTexts["Evaluaci√≥n de Fertilidad"]
        XCTAssertTrue(calculatorTitle.waitForExistence(timeout: 5), "Debe navegar a la calculadora")
        
        print("‚úÖ Test de navegaci√≥n a calculadora: PAS√ì")
    }
    
    // MARK: - üìù TESTS DE ENTRADA DE DATOS
    
    @MainActor
    func testDataEntry() throws {
        // Navegar a la calculadora
        try testNavigationToCalculator()
        
        // Test de entrada de edad
        let ageField = app.textFields["Edad"]
        if ageField.waitForExistence(timeout: 5) {
            ageField.tap()
            ageField.typeText("30")
            
            // Verificar que se acept√≥ el valor
            XCTAssertEqual(ageField.value as? String, "30", "La edad debe establecerse correctamente")
        }
        
        // Test de entrada de altura
        let heightField = app.textFields["Altura (cm)"]
        if heightField.waitForExistence(timeout: 5) {
            heightField.tap()
            heightField.typeText("165")
        }
        
        // Test de entrada de peso
        let weightField = app.textFields["Peso (kg)"]
        if weightField.waitForExistence(timeout: 5) {
            weightField.tap()
            weightField.typeText("65")
        }
        
        print("‚úÖ Test de entrada de datos: PAS√ì")
    }
    
    @MainActor
    func testFormValidation() throws {
        // Navegar a la calculadora
        try testNavigationToCalculator()
        
        // Intentar calcular sin datos
        let calculateButton = app.buttons["Calcular"]
        if calculateButton.waitForExistence(timeout: 5) {
            calculateButton.tap()
            
            // Verificar que aparezca alg√∫n mensaje de validaci√≥n
            let alertExists = app.alerts.count > 0
            let errorMessageExists = app.staticTexts.containing(.staticText, identifier: "requerido").count > 0
            
            XCTAssertTrue(alertExists || errorMessageExists, "Debe mostrar validaci√≥n cuando faltan datos")
        }
        
        print("‚úÖ Test de validaci√≥n de formulario: PAS√ì")
    }
    
    // MARK: - üßÆ TESTS DE C√ÅLCULO Y RESULTADOS
    
    @MainActor
    func testCompleteCalculationFlow() throws {
        // Navegar a la calculadora
        try testNavigationToCalculator()
        
        // Llenar datos b√°sicos
        fillBasicData()
        
        // Ejecutar c√°lculo
        let calculateButton = app.buttons["Calcular"]
        if calculateButton.waitForExistence(timeout: 5) {
            calculateButton.tap()
            
            // Esperar a que aparezcan los resultados
            let resultsTitle = app.staticTexts["Resultados del An√°lisis"]
            XCTAssertTrue(resultsTitle.waitForExistence(timeout: 10), "Deben aparecer los resultados")
            
            // Verificar que aparezcan probabilidades
            let monthlyProbability = app.staticTexts.containing(.staticText, identifier: "%").firstMatch
            XCTAssertTrue(monthlyProbability.waitForExistence(timeout: 5), "Debe mostrar probabilidad mensual")
        }
        
        print("‚úÖ Test de flujo completo de c√°lculo: PAS√ì")
    }
    
    @MainActor
    func testResultsNavigation() throws {
        // Ejecutar c√°lculo completo
        try testCompleteCalculationFlow()
        
        // Test de navegaci√≥n entre tabs de resultados
        let summaryTab = app.buttons["Resumen"]
        if summaryTab.waitForExistence(timeout: 5) {
            summaryTab.tap()
            
            // Verificar contenido de resumen
            let probabilityText = app.staticTexts.containing(.staticText, identifier: "Probabilidad").firstMatch
            XCTAssertTrue(probabilityText.waitForExistence(timeout: 5), "Debe mostrar informaci√≥n de probabilidad")
        }
        
        let factorsTab = app.buttons["Factores"]
        if factorsTab.waitForExistence(timeout: 5) {
            factorsTab.tap()
            
            // Verificar contenido de factores
            let factorsTitle = app.staticTexts["An√°lisis de Factores"]
            XCTAssertTrue(factorsTitle.waitForExistence(timeout: 5), "Debe mostrar an√°lisis de factores")
        }
        
        print("‚úÖ Test de navegaci√≥n en resultados: PAS√ì")
    }
    
    // MARK: - üéØ TESTS DEL SIMULADOR DE TRATAMIENTOS
    
    @MainActor
    func testTreatmentSimulator() throws {
        // Ejecutar c√°lculo completo
        try testCompleteCalculationFlow()
        
        // Navegar al simulador
        let simulatorTab = app.buttons["Simulador"]
        if simulatorTab.waitForExistence(timeout: 5) {
            simulatorTab.tap()
            
            // Verificar contenido del simulador
            let simulatorTitle = app.staticTexts["Simulador de Tratamientos"]
            XCTAssertTrue(simulatorTitle.waitForExistence(timeout: 5), "Debe mostrar el simulador")
            
            // Verificar recomendaci√≥n de tratamiento
            let treatmentRecommendation = app.staticTexts.containing(.staticText, identifier: "Recomendado").firstMatch
            XCTAssertTrue(treatmentRecommendation.waitForExistence(timeout: 5), "Debe mostrar recomendaci√≥n de tratamiento")
        }
        
        print("‚úÖ Test del simulador de tratamientos: PAS√ì")
    }
    
    @MainActor
    func testFactorCorrectionSimulation() throws {
        // Navegar al simulador
        try testTreatmentSimulator()
        
        // Buscar el bot√≥n de simulaci√≥n de correcci√≥n
        let correctionButton = app.buttons["Simular Correcci√≥n"]
        if correctionButton.waitForExistence(timeout: 5) {
            correctionButton.tap()
            
            // Verificar que aparezca la simulaci√≥n
            let correctionTitle = app.staticTexts["Simulaci√≥n de Correcci√≥n"]
            XCTAssertTrue(correctionTitle.waitForExistence(timeout: 5), "Debe mostrar la simulaci√≥n de correcci√≥n")
            
            // Verificar que aparezca informaci√≥n de mejora
            let improvementText = app.staticTexts.containing(.staticText, identifier: "Mejora").firstMatch
            XCTAssertTrue(improvementText.waitForExistence(timeout: 5), "Debe mostrar informaci√≥n de mejora")
        }
        
        print("‚úÖ Test de simulaci√≥n de correcci√≥n: PAS√ì")
    }
    
    // MARK: - ‚ôø TESTS DE ACCESIBILIDAD B√ÅSICOS
    
    @MainActor
    func testAccessibilityElements() throws {
        // Verificar que los elementos principales tengan etiquetas de accesibilidad
        let titleElement = app.staticTexts["FERTILIDAD"]
        if titleElement.waitForExistence(timeout: 5) {
            XCTAssertNotNil(titleElement.label, "El t√≠tulo debe tener etiqueta de accesibilidad")
        }
        
        // Verificar botones principales
        let buttons = app.buttons
        for i in 0..<min(buttons.count, 5) {
            let button = buttons.element(boundBy: i)
            if button.exists {
                XCTAssertTrue(button.isEnabled, "Los botones deben estar habilitados")
                XCTAssertFalse(button.label.isEmpty, "Los botones deben tener etiquetas")
            }
        }
        
        print("‚úÖ Test de accesibilidad b√°sica: PAS√ì")
    }
    
    @MainActor
    func testVoiceOverSupport() throws {
        // Habilitar VoiceOver para testing
        let device = XCUIDevice.shared
        
        // Verificar que los elementos sean accesibles para VoiceOver
        let titleElement = app.staticTexts["FERTILIDAD"]
        if titleElement.waitForExistence(timeout: 5) {
            XCTAssertTrue(titleElement.isAccessibilityElement, "El t√≠tulo debe ser accesible")
        }
        
        print("‚úÖ Test de soporte VoiceOver: PAS√ì")
    }
    
    // MARK: - ‚ö° TESTS DE RENDIMIENTO UI
    
    @MainActor
    func testLaunchPerformance() throws {
        // Medir tiempo de lanzamiento
        measure(metrics: [XCTApplicationLaunchMetric()]) {
            XCUIApplication().launch()
        }
        
        print("‚úÖ Test de rendimiento de lanzamiento: PAS√ì")
    }
    
    @MainActor
    func testCalculationPerformance() throws {
        // Navegar a la calculadora
        try testNavigationToCalculator()
        
        // Llenar datos
        fillBasicData()
        
        // Medir tiempo de c√°lculo
        let calculateButton = app.buttons["Calcular"]
        if calculateButton.waitForExistence(timeout: 5) {
            measure(metrics: [XCTClockMetric()]) {
                calculateButton.tap()
                
                // Esperar resultados
                let resultsTitle = app.staticTexts["Resultados del An√°lisis"]
                _ = resultsTitle.waitForExistence(timeout: 10)
            }
        }
        
        print("‚úÖ Test de rendimiento de c√°lculo: PAS√ì")
    }
    
    // MARK: - üîß FUNCIONES AUXILIARES
    
    private func fillBasicData() {
        // Llenar datos b√°sicos para testing
        let ageField = app.textFields["Edad"]
        if ageField.waitForExistence(timeout: 5) {
            ageField.tap()
            ageField.typeText("30")
        }
        
        let heightField = app.textFields["Altura (cm)"]
        if heightField.waitForExistence(timeout: 5) {
            heightField.tap()
            heightField.typeText("165")
        }
        
        let weightField = app.textFields["Peso (kg)"]
        if weightField.waitForExistence(timeout: 5) {
            weightField.tap()
            weightField.typeText("65")
        }
        
        // Ocultar teclado
        app.keyboards.buttons["Done"].tap()
    }
    
    private func waitForElementToAppear(_ element: XCUIElement, timeout: TimeInterval = 10) -> Bool {
        let predicate = NSPredicate(format: "exists == true")
        let expectation = XCTNSPredicateExpectation(predicate: predicate, object: element)
        let result = XCTWaiter().wait(for: [expectation], timeout: timeout)
        return result == .completed
    }
}
