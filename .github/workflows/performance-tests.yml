name: ⚡ Tests de Rendimiento

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar tests de rendimiento diariamente a las 2 AM
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  XCODE_VERSION: '16.0'
  IOS_VERSION: '18.5'
  DEVICE: 'iPhone 16'

jobs:
  performance-tests:
    name: ⚡ Tests de Rendimiento
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: 📱 Setup iOS Simulator
      uses: apple-actions/import-codesigning-certs@v1
      
    - name: ⚡ Ejecutar Tests de Rendimiento
      run: |
        echo "⚡ Ejecutando tests de rendimiento..."
        xcodebuild test \
          -project "Pronostico fertilidad.xcodeproj" \
          -scheme "Pronostico fertilidad" \
          -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
          -only-testing:Pronostico_fertilidadTests/PerformanceTestRunner \
          -resultBundlePath "PerformanceTestResults.xcresult" \
          | xcpretty --color --simple
        
    - name: 📊 Analizar Métricas de Rendimiento
      run: |
        echo "📊 Analizando métricas de rendimiento..."
        
        # Extraer métricas de los tests
        xcrun xccov view --report --json PerformanceTestResults.xcresult > performance-metrics.json
        
        # Analizar tiempos de ejecución
        echo "## ⚡ Métricas de Rendimiento" > performance-report.md
        echo "" >> performance-report.md
        echo "### 🕐 Tiempos de Ejecución:" >> performance-report.md
        echo "- Tests Unitarios: $(grep -o 'Test.*completed in [0-9.]*s' PerformanceTestResults.xcresult | head -1)" >> performance-report.md
        echo "- Tests de UI: $(grep -o 'UI.*completed in [0-9.]*s' PerformanceTestResults.xcresult | head -1)" >> performance-report.md
        echo "" >> performance-report.md
        echo "### 📈 Cobertura de Tests:" >> performance-report.md
        echo "- Total Tests: $(grep -c 'Test.*passed' PerformanceTestResults.xcresult)" >> performance-report.md
        echo "- Tests Pasaron: $(grep -c 'Test.*passed' PerformanceTestResults.xcresult)" >> performance-report.md
        echo "- Tests Fallaron: $(grep -c 'Test.*failed' PerformanceTestResults.xcresult)" >> performance-report.md
        
    - name: 💾 Subir Reportes de Rendimiento
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          PerformanceTestResults.xcresult
          performance-metrics.json
          performance-report.md
          
    - name: 📊 Comentar Métricas en PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ⚡ Reporte de Rendimiento\n\n${report}\n\n📊 [Ver logs completos](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
          });

  memory-leak-tests:
    name: 🧠 Tests de Memory Leaks
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: 🧠 Ejecutar Tests de Memory
      run: |
        echo "🧠 Ejecutando tests de memory leaks..."
        
        # Ejecutar tests con instrumentos de memory
        xcodebuild test \
          -project "Pronostico fertilidad.xcodeproj" \
          -scheme "Pronostico fertilidad" \
          -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
          -enableCodeCoverage YES \
          -resultBundlePath "MemoryTestResults.xcresult" \
          | xcpretty --color --simple
        
        # Analizar uso de memory
        echo "📊 Analizando uso de memory..."
        xcrun xccov view --report --json MemoryTestResults.xcresult > memory-analysis.json
        
    - name: 💾 Subir Análisis de Memory
      uses: actions/upload-artifact@v4
      with:
        name: memory-analysis
        path: |
          MemoryTestResults.xcresult
          memory-analysis.json

  load-tests:
    name: 🔥 Tests de Carga
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: 🔥 Ejecutar Tests de Carga
      run: |
        echo "🔥 Ejecutando tests de carga..."
        
        # Simular múltiples usuarios simultáneos
        for i in {1..5}; do
          echo "🧪 Usuario $i ejecutando tests..."
          xcodebuild test \
            -project "Pronostico fertilidad.xcodeproj" \
            -scheme "Pronostico fertilidad" \
            -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
            -resultBundlePath "LoadTestResults_$i.xcresult" \
            | xcpretty --color --simple &
        done
        
        # Esperar a que todos terminen
        wait
        
        echo "✅ Todos los tests de carga completados"
        
    - name: 📊 Analizar Tests de Carga
      run: |
        echo "📊 Analizando resultados de carga..."
        
        echo "## 🔥 Reporte de Tests de Carga" > load-test-report.md
        echo "" >> load-test-report.md
        echo "### 📱 Usuarios Simultáneos: 5" >> load-test-report.md
        echo "" >> load-test-report.md
        
        for i in {1..5}; do
          if [ -f "LoadTestResults_$i.xcresult" ]; then
            echo "#### 👤 Usuario $i:" >> load-test-report.md
            echo "- Tests Pasaron: $(grep -c 'Test.*passed' LoadTestResults_$i.xcresult)" >> load-test-report.md
            echo "- Tests Fallaron: $(grep -c 'Test.*failed' LoadTestResults_$i.xcresult)" >> load-test-report.md
            echo "" >> load-test-report.md
          fi
        done
        
    - name: 💾 Subir Tests de Carga
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: |
          LoadTestResults_*.xcresult
          load-test-report.md
