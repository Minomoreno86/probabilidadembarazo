name: ⚡ Performance Tests - Pronostico Fertilidad

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Pronostico fertilidadUITests/PerformanceTests.swift'
      - 'Pronostico fertilidad/**/*.swift'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Ejecutar tests de rendimiento cada domingo a las 3 AM UTC
    - cron: '0 3 * * 0'

env:
  DEVICE: "iPhone 16"
  IOS_VERSION: "18.6"
  PERFORMANCE_TIMEOUT: 300  # 5 minutos para tests de rendimiento

jobs:
  performance-tests:
    name: ⚡ Tests de Rendimiento
    runs-on: macos-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🍎 Configurar Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'
      
      - name: 🔧 Configurar Simulador
        run: |
          echo "🔧 Configurando simulador para tests de rendimiento..."
          
          # Listar simuladores disponibles
          xcrun simctl list devices available
          
          # Crear simulador específico para rendimiento si no existe
          SIMULATOR_ID=$(xcrun simctl create "Performance Test iPhone" "iPhone 16" "iOS 18.6" 2>/dev/null || echo "")
          
          if [ -n "$SIMULATOR_ID" ]; then
            echo "✅ Simulador creado: $SIMULATOR_ID"
          else
            echo "ℹ️  Usando simulador existente"
          fi
      
      - name: ⚡ Ejecutar Tests de Rendimiento
        run: |
          echo "⚡ Ejecutando tests de rendimiento optimizados..."
          
          # Configurar variables de entorno para tests de rendimiento
          export XCTEST_TIMEOUT=300
          export XCTEST_PERFORMANCE_METRICS=1
          
          # Ejecutar solo tests de rendimiento con timeouts generosos
          xcodebuild test \
            -project "Pronostico fertilidad.xcodeproj" \
            -scheme "Pronostico fertilidad" \
            -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
            -only-testing:Pronostico_fertilidadUITests/PerformanceTests \
            -test-timeout 300 \
            -parallel-testing-enabled NO \
            -maximum-concurrent-test-simulator-destinations 1 \
            | xcpretty --color
      
      - name: 📊 Analizar Resultados de Rendimiento
        run: |
          echo "📊 Analizando resultados de rendimiento..."
          
          # Extraer métricas de rendimiento del log
          if grep -q "Test Case.*PerformanceTests.*passed" xcodebuild.log; then
            echo "✅ Tests de rendimiento pasaron"
            echo "📈 Métricas de rendimiento:"
            grep -A 5 -B 5 "measure" xcodebuild.log || echo "No se encontraron métricas específicas"
          else
            echo "❌ Algunos tests de rendimiento fallaron"
            echo "🔍 Revisando logs de error..."
            grep -A 10 -B 5 "FAILED" xcodebuild.log || echo "No se encontraron errores específicos"
            exit 1
          fi
      
      - name: 🧹 Limpiar Simulador
        if: always()
        run: |
          echo "🧹 Limpiando simulador..."
          xcrun simctl shutdown all 2>/dev/null || true
          xcrun simctl erase all 2>/dev/null || true
      
      - name: 📋 Reporte de Rendimiento
        if: always()
        run: |
          echo "📋 Generando reporte de rendimiento..."
          
          echo "## ⚡ Reporte de Tests de Rendimiento" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Resumen:" >> $GITHUB_STEP_SUMMARY
          echo "- **Dispositivo:** ${{ env.DEVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Version:** ${{ env.IOS_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timeout:** ${{ env.PERFORMANCE_TIMEOUT }} segundos" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $? -eq 0 ]; then
            echo "✅ **Estado:** Tests de rendimiento exitosos" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Rendimiento:** Dentro de los límites esperados" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Estado:** Tests de rendimiento fallaron" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Acción:** Revisar métricas y optimizar código" >> $GITHUB_STEP_SUMMARY
          fi
