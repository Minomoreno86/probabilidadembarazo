name: üß™ Quick Testing - Pronostico Fertilidad

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  MIN_TEST_SUCCESS: 95
  MIN_COVERAGE: 80

jobs:
  quick-test:
    name: üß™ Tests R√°pidos
    runs-on: macos-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: üçé Configurar Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'
      
      - name: üß™ Tests Independientes (Sin Simulador)
        run: |
          echo "üß™ Ejecutando tests independientes..."
          
          # Ejecutar test runner
          TEST_OUTPUT=$(swift scripts/enhanced_test_runner.swift 2>&1)
          echo "$TEST_OUTPUT"
          
          # Extraer m√©tricas
          SUCCESS_RATE=$(echo "$TEST_OUTPUT" | grep "Porcentaje de √©xito:" | grep -o '[0-9]\+%' | head -1 | tr -d '%')
          TOTAL_TESTS=$(echo "$TEST_OUTPUT" | grep "Total de tests:" | grep -o '[0-9]\+' | head -1)
          PASSED_TESTS=$(echo "$TEST_OUTPUT" | grep "Tests pasados:" | grep -o '[0-9]\+' | head -1)
          
          echo "üìä M√âTRICAS EXTRA√çDAS:"
          echo "  Total tests: $TOTAL_TESTS"
          echo "  Tests pasados: $PASSED_TESTS"
          echo "  Porcentaje √©xito: $SUCCESS_RATE%"
          
          # Verificar umbral m√≠nimo
          if [ "$SUCCESS_RATE" -lt ${{ env.MIN_TEST_SUCCESS }} ]; then
            echo "‚ùå Tests insuficientes: $SUCCESS_RATE% (m√≠nimo: ${{ env.MIN_TEST_SUCCESS }}%)"
            echo "üö® BLOQUEANDO - Tests no cumplen est√°ndares"
            exit 1
          else
            echo "‚úÖ Tests exitosos: $SUCCESS_RATE%"
          fi
      
      - name: üìä Verificar Cobertura de C√≥digo
        run: |
          echo "üìä Verificando cobertura de c√≥digo..."
          
          # Compilar proyecto para an√°lisis
          xcodebuild build \
            -project "Pronostico fertilidad.xcodeproj" \
            -scheme "Pronostico fertilidad" \
            -destination "platform=iOS Simulator,name=iPhone 16" \
            -enableCodeCoverage YES \
            -resultBundlePath "CoverageResults.xcresult" \
            | xcpretty
          
          # Generar reporte de cobertura
          if [ -d "CoverageResults.xcresult" ]; then
            COVERAGE_REPORT=$(xcrun xccov view --report --files-for-target "Pronostico fertilidad" CoverageResults.xcresult)
            echo "$COVERAGE_REPORT"
            
            # Extraer cobertura total
            TOTAL_COVERAGE=$(echo "$COVERAGE_REPORT" | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | head -1 | tr -d '%')
            
            if [ -n "$TOTAL_COVERAGE" ]; then
              echo "üìà Cobertura total: $TOTAL_COVERAGE%"
              
              # Verificar umbral m√≠nimo
              if [ "$(echo "$TOTAL_COVERAGE < ${{ env.MIN_COVERAGE }}" | bc -l)" -eq 1 ]; then
                echo "‚ùå Cobertura insuficiente: $TOTAL_COVERAGE% (m√≠nimo: ${{ env.MIN_COVERAGE }}%)"
                echo "üö® BLOQUEANDO - Cobertura insuficiente"
                exit 1
              else
                echo "‚úÖ Cobertura suficiente: $TOTAL_COVERAGE%"
              fi
            else
              echo "‚ö†Ô∏è  No se pudo extraer m√©trica de cobertura"
            fi
          else
            echo "‚ö†Ô∏è  No se gener√≥ archivo de cobertura"
          fi
      
      - name: üì¶ Subir Resultados
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quick-test-results
          path: |
            CoverageResults.xcresult
          retention-days: 7
      
      - name: üìß Notificar Resultado
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Tests exitosos - PR puede continuar"
          else
            echo "‚ùå Tests fallaron - PR bloqueado"
          fi
