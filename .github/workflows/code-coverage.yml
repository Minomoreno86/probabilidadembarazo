name: 📊 Code Coverage

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  XCODE_VERSION: '16.0'
  IOS_VERSION: '18.6'
  DEVICE: 'iPhone 16'

jobs:
  code-coverage:
    name: 📊 Análisis de Code Coverage
    runs-on: macos-latest
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Para coverage completo
      
      - name: 🍎 Configurar Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: 🧪 Ejecutar Tests con Coverage
        run: |
          echo "🧪 Ejecutando tests con coverage..."
          xcodebuild test \
            -project "Pronostico fertilidad.xcodeproj" \
            -scheme "Pronostico fertilidad" \
            -destination "platform=iOS Simulator,name=${{ env.DEVICE }},OS=${{ env.IOS_VERSION }}" \
            -enableCodeCoverage YES \
            -resultBundlePath "CoverageResults.xcresult" \
            | xcpretty
      
      - name: 📊 Generar Reporte de Coverage
        run: |
          echo "📊 Generando reporte de coverage..."
          
          # Coverage general
          echo "=== COVERAGE GENERAL ==="
          xcrun xccov view --report CoverageResults.xcresult
          
          # Coverage por target
          echo "=== COVERAGE POR TARGET ==="
          xcrun xccov view --report --files-for-target "Pronostico fertilidad" CoverageResults.xcresult
          
          # Coverage por archivo
          echo "=== COVERAGE POR ARCHIVO ==="
          xcrun xccov view --report --files-for-target "Pronostico fertilidad" CoverageResults.xcresult | head -50
      
      - name: 📈 Comentar Coverage en PR
        uses: romeovs/lcov-reporter-action@v0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: coverage.info
      
      - name: 📦 Subir resultados de coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results
          path: CoverageResults.xcresult
          retention-days: 30
      
      - name: 📊 Verificar umbral de coverage
        run: |
          echo "📊 Verificando umbral de coverage..."
          
          # Extraer porcentaje de coverage
          COVERAGE=$(xcrun xccov view --report CoverageResults.xcresult | grep "Pronostico fertilidad" | awk '{print $2}' | sed 's/%//')
          
          echo "Coverage actual: $COVERAGE%"
          
          # Verificar si cumple el umbral del 90%
          if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
            echo "✅ Coverage cumple el umbral del 90%"
            echo "COVERAGE_PASSED=true" >> $GITHUB_ENV
          else
            echo "❌ Coverage NO cumple el umbral del 90%"
            echo "COVERAGE_PASSED=false" >> $GITHUB_ENV
            exit 1
          fi
      
      - name: 📧 Notificar resultado de coverage
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "📊 Code Coverage - ${{ job.status }}"
          to: ${{ secrets.EMAIL_TO }}
          from: "GitHub Actions"
          body: |
            Análisis de Code Coverage completado
            
            Estado: ${{ job.status }}
            PR: ${{ github.event.pull_request.number }}
            Branch: ${{ github.head_ref }}
            
            Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
