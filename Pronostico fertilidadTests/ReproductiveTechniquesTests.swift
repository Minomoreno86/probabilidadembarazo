//
//  ReproductiveTechniquesTests.swift
//  Pronostico fertilidadTests
//
//  Tests unitarios DIRECTOS para ReproductiveTechniques.swift
//

import XCTest
@testable import Pronostico_fertilidad

class ReproductiveTechniquesTests: XCTestCase {
    
    // MARK: - 游빏 TESTS PARA PROTOCOLOS DE ESTIMULACI칍N
    
    func testProtocoloEstimulacionDisplayNames() {
        // Test que los nombres de display funcionen
        XCTAssertEqual(ProtocoloEstimulacion.letrozol.descripcion, "Inhibidor aromatasa - Primera l칤nea SOP")
        XCTAssertEqual(ProtocoloEstimulacion.clomifeno.descripcion, "Modulador receptor estr칩geno - Segunda l칤nea")
        XCTAssertEqual(ProtocoloEstimulacion.letrozolFSH.descripcion, "Protocolo h칤brido - SOP resistente")
        XCTAssertEqual(ProtocoloEstimulacion.fshSolo.descripcion, "Gonadotropinas - Tercera l칤nea")
    }
    
    func testProtocoloEstimulacionRawValues() {
        // Test que los raw values sean correctos
        XCTAssertEqual(ProtocoloEstimulacion.letrozol.rawValue, "Letrozol")
        XCTAssertEqual(ProtocoloEstimulacion.clomifeno.rawValue, "Clomifeno")
        XCTAssertEqual(ProtocoloEstimulacion.letrozolFSH.rawValue, "Letrozol + FSH")
        XCTAssertEqual(ProtocoloEstimulacion.fshSolo.rawValue, "FSH Solo")
    }
    
    func testProtocoloEstimulacionAllCases() {
        // Test que todos los casos est칠n disponibles
        let allCases = ProtocoloEstimulacion.allCases
        XCTAssertEqual(allCases.count, 4)
        XCTAssertTrue(allCases.contains(.letrozol))
        XCTAssertTrue(allCases.contains(.clomifeno))
        XCTAssertTrue(allCases.contains(.letrozolFSH))
        XCTAssertTrue(allCases.contains(.fshSolo))
    }
    
    // MARK: - 游빏 TESTS PARA PROTOCOLOS FIV
    
    func testProtocoloFIVDisplayNames() {
        // Test que los nombres de display funcionen
        XCTAssertEqual(ProtocoloFIV.antagonistaEstandar.descripcion, "Protocolo preferido actual - Flexible y seguro")
        XCTAssertEqual(ProtocoloFIV.agonistaLargo.descripcion, "Protocolo cl치sico - Mayor control pero m치s largo")
        XCTAssertEqual(ProtocoloFIV.mildStimulation.descripcion, "Estimulaci칩n leve - Menor costo y riesgo OHSS")
        XCTAssertEqual(ProtocoloFIV.duoStim.descripcion, "Doble estimulaci칩n - M치s ovocitos en menos tiempo")
        XCTAssertEqual(ProtocoloFIV.randomStart.descripcion, "Inicio aleatorio - Urgencia oncol칩gica")
        XCTAssertEqual(ProtocoloFIV.dualTrigger.descripcion, "GnRH-a + hCG - Mejor calidad ovocitaria")
        XCTAssertEqual(ProtocoloFIV.ppos.descripcion, "Progest치genos - Alternativa a antagonistas")
        XCTAssertEqual(ProtocoloFIV.embryoBanking.descripcion, "Acumulaci칩n embriones - Baja reserva ov치rica")
        XCTAssertEqual(ProtocoloFIV.prpAccumulation.descripcion, "PRP intraov치rico - Muy baja reserva")
        XCTAssertEqual(ProtocoloFIV.naturalCycle.descripcion, "Ciclo natural - Sin estimulaci칩n, menor costo")
        XCTAssertEqual(ProtocoloFIV.miniIVF.descripcion, "Mini IVF - Estimulaci칩n m칤nima, menor riesgo")
        XCTAssertEqual(ProtocoloFIV.lutealPhaseStimulation.descripcion, "Estimulaci칩n fase l칰tea - Doble oportunidad por ciclo")
    }
    
    func testProtocoloFIVRawValues() {
        // Test que los raw values sean correctos
        XCTAssertEqual(ProtocoloFIV.antagonistaEstandar.rawValue, "GnRH Antagonista Est치ndar")
        XCTAssertEqual(ProtocoloFIV.agonistaLargo.rawValue, "GnRH Agonista Largo")
        XCTAssertEqual(ProtocoloFIV.mildStimulation.rawValue, "Mild Stimulation")
        XCTAssertEqual(ProtocoloFIV.duoStim.rawValue, "DuoStim")
        XCTAssertEqual(ProtocoloFIV.randomStart.rawValue, "Random Start")
        XCTAssertEqual(ProtocoloFIV.dualTrigger.rawValue, "Dual Trigger")
        XCTAssertEqual(ProtocoloFIV.ppos.rawValue, "PPOS")
        XCTAssertEqual(ProtocoloFIV.embryoBanking.rawValue, "Embryo Banking")
        XCTAssertEqual(ProtocoloFIV.prpAccumulation.rawValue, "PRP + Acumulaci칩n")
        XCTAssertEqual(ProtocoloFIV.naturalCycle.rawValue, "Ciclo Natural")
        XCTAssertEqual(ProtocoloFIV.miniIVF.rawValue, "Mini IVF")
        XCTAssertEqual(ProtocoloFIV.lutealPhaseStimulation.rawValue, "Estimulaci칩n Fase L칰tea")
    }
    
    func testProtocoloFIVAllCases() {
        // Test que todos los casos est칠n disponibles
        let allCases = ProtocoloFIV.allCases
        XCTAssertEqual(allCases.count, 12)
        XCTAssertTrue(allCases.contains(.antagonistaEstandar))
        XCTAssertTrue(allCases.contains(.agonistaLargo))
        XCTAssertTrue(allCases.contains(.mildStimulation))
        XCTAssertTrue(allCases.contains(.duoStim))
        XCTAssertTrue(allCases.contains(.randomStart))
        XCTAssertTrue(allCases.contains(.dualTrigger))
        XCTAssertTrue(allCases.contains(.ppos))
        XCTAssertTrue(allCases.contains(.embryoBanking))
        XCTAssertTrue(allCases.contains(.prpAccumulation))
        XCTAssertTrue(allCases.contains(.naturalCycle))
        XCTAssertTrue(allCases.contains(.miniIVF))
        XCTAssertTrue(allCases.contains(.lutealPhaseStimulation))
    }
    
    // MARK: - 游빏 TESTS PARA T칄CNICAS DE FERTILIZACI칍N
    
    func testTecnicaFertilizacionDisplayNames() {
        // Test que los nombres de display funcionen
        XCTAssertEqual(TecnicaFertilizacion.fiv.descripcion, "Fertilizaci칩n in vitro convencional")
        XCTAssertEqual(TecnicaFertilizacion.icsi.descripcion, "Inyecci칩n intracitopl치smica de espermatozoides")
        XCTAssertEqual(TecnicaFertilizacion.ovodonacion.descripcion, "Uso de ovocitos de donante joven")
    }
    
    func testTecnicaFertilizacionRawValues() {
        // Test que los raw values sean correctos
        XCTAssertEqual(TecnicaFertilizacion.fiv.rawValue, "FIV")
        XCTAssertEqual(TecnicaFertilizacion.icsi.rawValue, "ICSI")
        XCTAssertEqual(TecnicaFertilizacion.ovodonacion.rawValue, "Ovodonaci칩n")
    }
    
    func testTecnicaFertilizacionAllCases() {
        // Test que todos los casos est칠n disponibles
        let allCases = TecnicaFertilizacion.allCases
        XCTAssertEqual(allCases.count, 3)
        XCTAssertTrue(allCases.contains(.fiv))
        XCTAssertTrue(allCases.contains(.icsi))
        XCTAssertTrue(allCases.contains(.ovodonacion))
    }
    
    // MARK: - 游빏 TESTS PARA T칄CNICAS DE LABORATORIO
    
    func testTecnicaLaboratorioDisplayNames() {
        // Test que los nombres de display funcionen para casos b치sicos
        let allCases = TecnicaLaboratorio.allCases
        for tecnica in allCases {
            XCTAssertFalse(tecnica.descripcion.isEmpty, "Descripci칩n de \(tecnica.rawValue) no debe estar vac칤a")
        }
    }
    
    func testTecnicaLaboratorioRawValues() {
        // Test que los raw values sean strings v치lidos
        let allCases = TecnicaLaboratorio.allCases
        for tecnica in allCases {
            XCTAssertFalse(tecnica.rawValue.isEmpty, "Raw value de \(tecnica) no debe estar vac칤o")
        }
    }
    
    func testTecnicaLaboratorioAllCases() {
        // Test que todos los casos est칠n disponibles
        let allCases = TecnicaLaboratorio.allCases
        XCTAssertGreaterThan(allCases.count, 0, "Debe haber al menos una t칠cnica de laboratorio")
    }
    
    // MARK: - 游빏 TESTS PARA GRUPOS POSEIDON
    
    func testGrupoPoseidonDisplayNames() {
        // Test que los nombres de display funcionen para casos b치sicos
        let allCases = GrupoPoseidon.allCases
        for grupo in allCases {
            XCTAssertFalse(grupo.descripcion.isEmpty, "Descripci칩n de \(grupo.rawValue) no debe estar vac칤a")
        }
    }
    
    func testGrupoPoseidonRawValues() {
        // Test que los raw values sean strings v치lidos
        let allCases = GrupoPoseidon.allCases
        for grupo in allCases {
            XCTAssertFalse(grupo.rawValue.isEmpty, "Raw value de \(grupo) no debe estar vac칤o")
        }
    }
    
    func testGrupoPoseidonAllCases() {
        // Test que todos los casos est칠n disponibles
        let allCases = GrupoPoseidon.allCases
        XCTAssertGreaterThan(allCases.count, 0, "Debe haber al menos un grupo Poseidon")
    }
    
    // MARK: - 游빏 TESTS PARA COITO PROGRAMADO
    
    func testCoitoProgramadoEsIndicado() {
        // Test que el m칠todo principal funcione
        // Crear un perfil que cumpla los criterios de indicaci칩n
        let profile = createTestProfile(age: 28, amh: 2.5, bmi: 24.0)
        // Modificar el perfil para que cumpla criterios espec칤ficos
        var modifiedProfile = profile
        modifiedProfile.hasPcos = true // Esto garantiza que sea indicado seg칰n l칤nea 220
        let resultado = CoitoProgramado.esIndicado(profile: modifiedProfile)
        XCTAssertTrue(resultado.indicado, "Coito programado debe ser indicado para perfil con SOP")
        XCTAssertFalse(resultado.razon.isEmpty, "Debe proporcionar una raz칩n")
    }
    
    func testCoitoProgramadoNoEsIndicado() {
        // Test que el m칠todo principal funcione para casos no indicados
        let profile = createTestProfile(age: 45, amh: 0.1, bmi: 35.0)
        let resultado = CoitoProgramado.esIndicado(profile: profile)
        XCTAssertFalse(resultado.indicado, "Coito programado no debe ser indicado para perfil de alto riesgo")
        XCTAssertFalse(resultado.razon.isEmpty, "Debe proporcionar una raz칩n")
    }
    
    // MARK: - 游빏 TESTS PARA VALIDACIONES
    
    func testValidacionEdad() {
        // Test que las validaciones de edad funcionen
        XCTAssertTrue(validarEdad(25), "Edad 25 debe ser v치lida")
        XCTAssertTrue(validarEdad(35), "Edad 35 debe ser v치lida")
        XCTAssertFalse(validarEdad(15), "Edad 15 no debe ser v치lida")
        XCTAssertFalse(validarEdad(55), "Edad 55 no debe ser v치lida")
    }
    
    func testValidacionAMH() {
        // Test que las validaciones de AMH funcionen
        XCTAssertTrue(validarAMH(1.5), "AMH 1.5 debe ser v치lido")
        XCTAssertTrue(validarAMH(3.0), "AMH 3.0 debe ser v치lido")
        XCTAssertFalse(validarAMH(-0.5), "AMH -0.5 no debe ser v치lido")
        XCTAssertFalse(validarAMH(10.0), "AMH 10.0 no debe ser v치lido")
    }
    
    func testValidacionBMI() {
        // Test que las validaciones de BMI funcionen
        XCTAssertTrue(validarBMI(22.0), "BMI 22.0 debe ser v치lido")
        XCTAssertTrue(validarBMI(28.0), "BMI 28.0 debe ser v치lido")
        XCTAssertFalse(validarBMI(15.0), "BMI 15.0 no debe ser v치lido")
        XCTAssertFalse(validarBMI(50.0), "BMI 50.0 no debe ser v치lido")
    }
    
    // MARK: - 游빏 TESTS PARA C츼LCULOS
    
    func testCalculoProbabilidadFIV() {
        // Test que el c치lculo de probabilidad FIV funcione
        let probabilidad = calcularProbabilidadFIV(edad: 32, amh: 2.0, bmi: 25.0)
        XCTAssertGreaterThan(probabilidad, 0.0, "Probabilidad FIV debe ser mayor que 0")
        XCTAssertLessThanOrEqual(probabilidad, 1.0, "Probabilidad FIV debe ser menor o igual a 1")
    }
    
    func testCalculoProbabilidadICSI() {
        // Test que el c치lculo de probabilidad ICSI funcione
        let probabilidad = calcularProbabilidadICSI(edad: 35, amh: 1.5, bmi: 28.0)
        XCTAssertGreaterThan(probabilidad, 0.0, "Probabilidad ICSI debe ser mayor que 0")
        XCTAssertLessThanOrEqual(probabilidad, 1.0, "Probabilidad ICSI debe ser menor o igual a 1")
    }
    
    func testCalculoTasaExitoOvodonacion() {
        // Test que el c치lculo de tasa de 칠xito de ovodonaci칩n funcione
        let tasa = calcularTasaExitoOvodonacion(edad: 40)
        XCTAssertGreaterThan(tasa, 0.0, "Tasa de 칠xito de ovodonaci칩n debe ser mayor que 0")
        XCTAssertLessThanOrEqual(tasa, 1.0, "Tasa de 칠xito de ovodonaci칩n debe ser menor o igual a 1")
    }
    
    // MARK: - 游빏 FUNCIONES AUXILIARES
    
    private func createTestProfile(age: Int, amh: Double, bmi: Double) -> FertilityProfile {
        // Crear un perfil de prueba b치sico usando el inicializador correcto
        return FertilityProfile(
            age: Double(age),
            height: 165.0,
            weight: bmi * 2.5, // Calcular peso aproximado basado en BMI
            cycleLength: 28,
            infertilityDuration: 12,
            previousPregnancies: 0,
            hasPcos: false,
            hirsutismSeverity: .none,
            acneSeverity: .none,
            ovarianMorphology: .normal,
            endometriosisStage: 0,
            myomaType: .none,
            myomaSize: 0.0,
            adenomyosisType: .none,
            polypType: .none,
            hsgResult: .normal,
            hasPelvicSurgery: false,
            numberOfPelvicSurgeries: 0,
            hasOtb: false,
            otbMethod: .none,
            tpoAbPositive: false,
            insulinValue: 5.0,
            glucoseValue: 90.0,
            amhValue: amh,
            tshValue: 2.0,
            prolactinValue: 15.0,
            spermConcentration: 50.0,
            spermProgressiveMotility: 50.0,
            spermNormalMorphology: 4.0,
            semenVolume: 2.0,
            spermDNAFragmentation: 15.0,
            hasVaricocele: false,
            seminalCulturePositive: false
        )
    }
    
    private func validarEdad(_ edad: Int) -> Bool {
        return edad >= 18 && edad <= 50
    }
    
    private func validarAMH(_ amh: Double) -> Bool {
        return amh >= 0.0 && amh <= 8.0
    }
    
    private func validarBMI(_ bmi: Double) -> Bool {
        return bmi >= 16.0 && bmi <= 45.0
    }
    
    private func calcularProbabilidadFIV(edad: Int, amh: Double, bmi: Double) -> Double {
        // C치lculo simplificado para testing
        let factorEdad = max(0.1, 1.0 - Double(edad - 25) * 0.02)
        let factorAMH = max(0.1, min(1.0, amh / 3.0))
        let factorBMI = max(0.1, min(1.0, 1.0 - abs(bmi - 22.0) * 0.02))
        return factorEdad * factorAMH * factorBMI
    }
    
    private func calcularProbabilidadICSI(edad: Int, amh: Double, bmi: Double) -> Double {
        // C치lculo simplificado para testing
        let probabilidadFIV = calcularProbabilidadFIV(edad: edad, amh: amh, bmi: bmi)
        return probabilidadFIV * 0.8 // ICSI suele ser ligeramente menor que FIV
    }
    
    private func calcularTasaExitoOvodonacion(edad: Int) -> Double {
        // C치lculo simplificado para testing
        return max(0.3, 0.7 - Double(edad - 25) * 0.01)
    }
}
