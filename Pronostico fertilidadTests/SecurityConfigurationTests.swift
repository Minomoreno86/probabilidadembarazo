//
//  SecurityConfigurationTests.swift
//  Pronostico fertilidadTests
//
//  Tests unitarios para SecurityConfiguration
//

import XCTest
@testable import Pronostico_fertilidad

final class SecurityConfigurationTests: XCTestCase {
    
    override func setUpWithError() throws {
        // Setup para cada test
    }
    
    override func tearDownWithError() throws {
        // Cleanup despu√©s de cada test
    }
    
    // MARK: - üîê TESTS DE POL√çTICAS DE AUTENTICACI√ìN
    
    func testAuthenticationPolicies() throws {
        // Test de pol√≠ticas de autenticaci√≥n
        XCTAssertEqual(SecurityConfiguration.sessionTimeout, 1800, "El timeout de sesi√≥n debe ser 30 minutos")
        XCTAssertEqual(SecurityConfiguration.maxFailedAuthAttempts, 5, "El m√°ximo de intentos fallidos debe ser 5")
        XCTAssertEqual(SecurityConfiguration.lockoutDuration, 900, "La duraci√≥n de bloqueo debe ser 15 minutos")
        
        // Verificar que los valores son razonables para aplicaciones m√©dicas
        XCTAssertLessThan(SecurityConfiguration.sessionTimeout, 3600, "El timeout de sesi√≥n debe ser menor a 1 hora para seguridad m√©dica")
        XCTAssertLessThan(SecurityConfiguration.maxFailedAuthAttempts, 10, "El m√°ximo de intentos debe ser menor a 10 para seguridad m√©dica")
    }
    
    // MARK: - üîí TESTS DE POL√çTICAS DE DATOS M√âDICOS
    
    func testMedicalDataPolicies() throws {
        // Test de pol√≠ticas de datos m√©dicos
        XCTAssertEqual(SecurityConfiguration.medicalDataProtectionLevel, .complete, "El nivel de protecci√≥n debe ser completo")
        XCTAssertEqual(SecurityConfiguration.medicalDataRetentionDays, 2555, "La retenci√≥n debe ser 7 a√±os")
        XCTAssertTrue(SecurityConfiguration.requireBiometricForMedicalData, "Debe requerir autenticaci√≥n biom√©trica")
        
        // Verificar que cumple con est√°ndares m√©dicos
        XCTAssertGreaterThan(SecurityConfiguration.medicalDataRetentionDays, 1800, "La retenci√≥n debe ser al menos 5 a√±os")
    }
    
    // MARK: - üîê TESTS DE POL√çTICAS DE ENCRIPTACI√ìN
    
    func testEncryptionPolicies() throws {
        // Test de pol√≠ticas de encriptaci√≥n
        XCTAssertEqual(SecurityConfiguration.encryptionAlgorithm, "AES-256-GCM", "El algoritmo debe ser AES-256-GCM")
        XCTAssertEqual(SecurityConfiguration.encryptionKeySize, 256, "El tama√±o de clave debe ser 256 bits")
        XCTAssertTrue(SecurityConfiguration.autoRotateEncryptionKeys, "Debe rotar claves autom√°ticamente")
        XCTAssertEqual(SecurityConfiguration.keyRotationIntervalDays, 90, "La rotaci√≥n debe ser cada 90 d√≠as")
        
        // Verificar que cumple con est√°ndares de seguridad
        XCTAssertGreaterThanOrEqual(SecurityConfiguration.encryptionKeySize, 256, "El tama√±o de clave debe ser al menos 256 bits")
        XCTAssertLessThanOrEqual(SecurityConfiguration.keyRotationIntervalDays, 365, "La rotaci√≥n debe ser al menos anual")
    }
    
    // MARK: - üì± TESTS DE POL√çTICAS DEL DISPOSITIVO
    
    func testDevicePolicies() throws {
        // Test de pol√≠ticas del dispositivo
        XCTAssertFalse(SecurityConfiguration.allowSimulatorUsage, "No debe permitir uso en simulador")
        XCTAssertTrue(SecurityConfiguration.requireDevicePasscode, "Debe requerir c√≥digo de acceso")
        XCTAssertTrue(SecurityConfiguration.requireBiometricAuthentication, "Debe requerir autenticaci√≥n biom√©trica")
        XCTAssertFalse(SecurityConfiguration.allowJailbrokenDevice, "No debe permitir dispositivos jailbreak")
        
        // Verificar que las pol√≠ticas son estrictas para datos m√©dicos
        XCTAssertFalse(SecurityConfiguration.allowSimulatorUsage, "El simulador no debe permitirse para datos m√©dicos")
        XCTAssertTrue(SecurityConfiguration.requireDevicePasscode, "Debe requerir c√≥digo de acceso para datos m√©dicos")
    }
    
    // MARK: - üîç TESTS DE POL√çTICAS DE AUDITOR√çA
    
    func testAuditPolicies() throws {
        // Test de pol√≠ticas de auditor√≠a
        XCTAssertTrue(SecurityConfiguration.enableAuditLogging, "Debe habilitar logging de auditor√≠a")
        XCTAssertEqual(SecurityConfiguration.auditLogLevel, .detailed, "El nivel debe ser detallado")
        XCTAssertEqual(SecurityConfiguration.auditLogRetentionDays, 90, "La retenci√≥n debe ser 90 d√≠as")
        XCTAssertTrue(SecurityConfiguration.encryptAuditLogs, "Debe encriptar logs de auditor√≠a")
        
        // Verificar que cumple con regulaciones m√©dicas
        XCTAssertTrue(SecurityConfiguration.enableAuditLogging, "El logging de auditor√≠a es obligatorio para aplicaciones m√©dicas")
        XCTAssertGreaterThanOrEqual(SecurityConfiguration.auditLogRetentionDays, 30, "La retenci√≥n debe ser al menos 30 d√≠as")
    }
    
    // MARK: - üåê TESTS DE POL√çTICAS DE RED
    
    func testNetworkPolicies() throws {
        // Test de pol√≠ticas de red
        XCTAssertFalse(SecurityConfiguration.allowInsecureConnections, "No debe permitir conexiones HTTP")
        XCTAssertTrue(SecurityConfiguration.requireValidSSLCertificates, "Debe requerir certificados SSL v√°lidos")
        XCTAssertFalse(SecurityConfiguration.allowSelfSignedCertificates, "No debe permitir certificados autofirmados")
        
        // Verificar que cumple con est√°ndares de seguridad de red
        XCTAssertFalse(SecurityConfiguration.allowInsecureConnections, "Las conexiones inseguras no son permitidas para datos m√©dicos")
        XCTAssertTrue(SecurityConfiguration.requireValidSSLCertificates, "Los certificados SSL v√°lidos son obligatorios")
    }
    
    // MARK: - üìä TESTS DE POL√çTICAS DE PRIVACIDAD
    
    func testPrivacyPolicies() throws {
        // Test de pol√≠ticas de privacidad
        XCTAssertFalse(SecurityConfiguration.collectUsageAnalytics, "No debe recopilar analytics de uso")
        XCTAssertFalse(SecurityConfiguration.shareDataWithThirdParties, "No debe compartir datos con terceros")
        XCTAssertFalse(SecurityConfiguration.allowUserTracking, "No debe permitir tracking de usuario")
        XCTAssertTrue(SecurityConfiguration.requireExplicitMedicalDataConsent, "Debe requerir consentimiento expl√≠cito")
        
        // Verificar que cumple con GDPR y regulaciones de privacidad
        XCTAssertFalse(SecurityConfiguration.shareDataWithThirdParties, "No compartir con terceros es requerido por GDPR")
        XCTAssertTrue(SecurityConfiguration.requireExplicitMedicalDataConsent, "El consentimiento expl√≠cito es requerido por GDPR")
    }
    
    // MARK: - üö® TESTS DE POL√çTICAS DE INCIDENTES
    
    func testIncidentPolicies() throws {
        // Test de pol√≠ticas de incidentes
        XCTAssertTrue(SecurityConfiguration.autoNotifySecurityIncidents, "Debe notificar incidentes autom√°ticamente")
        XCTAssertEqual(SecurityConfiguration.criticalIncidentThreshold, 3, "El umbral de incidentes cr√≠ticos debe ser 3")
        XCTAssertEqual(SecurityConfiguration.criticalIncidentResponseTimeMinutes, 15, "El tiempo de respuesta debe ser 15 minutos")
        
        // Verificar que las pol√≠ticas son apropiadas para aplicaciones m√©dicas
        XCTAssertTrue(SecurityConfiguration.autoNotifySecurityIncidents, "La notificaci√≥n autom√°tica es cr√≠tica para aplicaciones m√©dicas")
        XCTAssertLessThanOrEqual(SecurityConfiguration.criticalIncidentResponseTimeMinutes, 30, "El tiempo de respuesta debe ser r√°pido")
    }
    
    // MARK: - üîß TESTS DE POL√çTICAS DE DESARROLLO
    
    func testDevelopmentPolicies() throws {
        // Test de pol√≠ticas de desarrollo
        XCTAssertFalse(SecurityConfiguration.enableDebugModeInProduction, "No debe habilitar modo debug en producci√≥n")
        XCTAssertFalse(SecurityConfiguration.showSensitiveInfoInLogs, "No debe mostrar informaci√≥n sensible en logs")
        XCTAssertFalse(SecurityConfiguration.allowDeveloperConsoleAccess, "No debe permitir acceso a consola de desarrollo")
        XCTAssertFalse(SecurityConfiguration.enableHotReloadInProduction, "No debe habilitar hot reload en producci√≥n")
        
        // Verificar que las pol√≠ticas son estrictas para producci√≥n
        XCTAssertFalse(SecurityConfiguration.enableDebugModeInProduction, "El modo debug no debe estar habilitado en producci√≥n")
        XCTAssertFalse(SecurityConfiguration.showSensitiveInfoInLogs, "La informaci√≥n sensible no debe aparecer en logs")
    }
    
    // MARK: - üè∑Ô∏è TESTS DE ENUMERACIONES
    
    func testDataProtectionLevelEnum() throws {
        // Test de enumeraci√≥n DataProtectionLevel
        let levels = DataProtectionLevel.allCases
        XCTAssertEqual(levels.count, 4, "Debe haber 4 niveles de protecci√≥n")
        
        // Verificar descripciones
        XCTAssertEqual(DataProtectionLevel.none.description, "Sin protecci√≥n")
        XCTAssertEqual(DataProtectionLevel.complete.description, "Protecci√≥n completa")
        XCTAssertEqual(DataProtectionLevel.completeUnlessOpen.description, "Protecci√≥n completa a menos que est√© abierta")
        XCTAssertEqual(DataProtectionLevel.completeUntilFirstUserAuthentication.description, "Protecci√≥n completa hasta primera autenticaci√≥n")
    }
    
    func testAuditLogLevelEnum() throws {
        // Test de enumeraci√≥n AuditLogLevel
        let levels = AuditLogLevel.allCases
        XCTAssertEqual(levels.count, 4, "Debe haber 4 niveles de logging")
        
        // Verificar descripciones
        XCTAssertEqual(AuditLogLevel.minimal.description, "M√≠nimo - Solo eventos cr√≠ticos")
        XCTAssertEqual(AuditLogLevel.basic.description, "B√°sico - Eventos importantes")
        XCTAssertEqual(AuditLogLevel.detailed.description, "Detallado - Todos los eventos")
        XCTAssertEqual(AuditLogLevel.verbose.description, "Verboso - Informaci√≥n completa")
    }
    
    // MARK: - üîê TESTS DE VALIDACI√ìN DE CONFIGURACI√ìN
    
    func testConfigurationValidation() throws {
        // Test de validaci√≥n de configuraci√≥n
        let issues = SecurityConfiguration.validateConfiguration()
        
        // Verificar que la validaci√≥n funciona
        XCTAssertNotNil(issues, "La validaci√≥n debe retornar una lista de problemas")
        
        // Verificar que no hay problemas cr√≠ticos
        let criticalIssues = issues.filter { $0.severity == .critical }
        XCTAssertEqual(criticalIssues.count, 0, "No debe haber problemas cr√≠ticos en la configuraci√≥n")
        
        // Verificar que la configuraci√≥n es segura (puede no haber problemas)
        XCTAssertGreaterThanOrEqual(issues.count, 0, "La configuraci√≥n puede ser perfecta o tener problemas menores")
        
        // Verificar que si hay problemas, no son cr√≠ticos
        for issue in issues {
            XCTAssertNotEqual(issue.severity, .critical, "No debe haber problemas cr√≠ticos")
        }
    }
    
    func testHIPAACompliance() throws {
        // Test de cumplimiento HIPAA
        let isHIPAACompliant = SecurityConfiguration.isHIPAACompliant()
        
        // Verificar que cumple con HIPAA
        XCTAssertTrue(isHIPAACompliant, "La configuraci√≥n debe cumplir con HIPAA")
        
        // Verificar que no hay problemas cr√≠ticos
        let issues = SecurityConfiguration.validateConfiguration()
        let criticalIssues = issues.filter { $0.severity == .critical }
        XCTAssertEqual(criticalIssues.count, 0, "No debe haber problemas cr√≠ticos para cumplir con HIPAA")
    }
    
    func testGDPRCompliance() throws {
        // Test de cumplimiento GDPR
        let isGDPRCompliant = SecurityConfiguration.isGDPRCompliant()
        
        // Verificar que cumple con GDPR
        XCTAssertTrue(isGDPRCompliant, "La configuraci√≥n debe cumplir con GDPR")
        
        // Verificar pol√≠ticas espec√≠ficas de GDPR
        XCTAssertTrue(SecurityConfiguration.requireExplicitMedicalDataConsent, "El consentimiento expl√≠cito es requerido por GDPR")
        XCTAssertFalse(SecurityConfiguration.shareDataWithThirdParties, "No compartir con terceros es requerido por GDPR")
        XCTAssertFalse(SecurityConfiguration.allowUserTracking, "No permitir tracking es requerido por GDPR")
    }
    
    // MARK: - üìã TESTS DE MODELO DE PROBLEMA DE VALIDACI√ìN
    
    func testSecurityValidationIssue() throws {
        // Test del modelo SecurityValidationIssue
        let issue = SecurityValidationIssue(
            severity: .high,
            category: .encryption,
            message: "Test issue message",
            recommendation: "Test recommendation"
        )
        
        // Verificar propiedades
        XCTAssertEqual(issue.severity, .high, "La severidad debe ser alta")
        XCTAssertEqual(issue.category, .encryption, "La categor√≠a debe ser encriptaci√≥n")
        XCTAssertEqual(issue.message, "Test issue message", "El mensaje debe coincidir")
        XCTAssertEqual(issue.recommendation, "Test recommendation", "La recomendaci√≥n debe coincidir")
        XCTAssertFalse(issue.isCritical, "No debe ser cr√≠tico")
    }
    
    func testSecurityIssueSeverityEnum() throws {
        // Test de enumeraci√≥n SecurityIssueSeverity
        let severities = SecurityIssueSeverity.allCases
        XCTAssertEqual(severities.count, 4, "Debe haber 4 niveles de severidad")
        
        // Verificar que critical es cr√≠tico
        let criticalIssue = SecurityValidationIssue(
            severity: .critical,
            category: .authentication,
            message: "Critical issue",
            recommendation: "Fix immediately"
        )
        XCTAssertTrue(criticalIssue.isCritical, "Los problemas cr√≠ticos deben marcarse como cr√≠ticos")
    }
    
    func testSecurityIssueCategoryEnum() throws {
        // Test de enumeraci√≥n SecurityIssueCategory
        let categories = SecurityIssueCategory.allCases
        XCTAssertEqual(categories.count, 7, "Debe haber 7 categor√≠as")
        
        // Verificar descripciones
        XCTAssertEqual(SecurityIssueCategory.authentication.description, "Autenticaci√≥n")
        XCTAssertEqual(SecurityIssueCategory.encryption.description, "Encriptaci√≥n")
        XCTAssertEqual(SecurityIssueCategory.auditing.description, "Auditor√≠a")
        XCTAssertEqual(SecurityIssueCategory.device.description, "Dispositivo")
        XCTAssertEqual(SecurityIssueCategory.network.description, "Red")
        XCTAssertEqual(SecurityIssueCategory.privacy.description, "Privacidad")
        XCTAssertEqual(SecurityIssueCategory.development.description, "Desarrollo")
    }
    
    // MARK: - üö® TESTS DE CASOS EXTREMOS
    
    func testEmptyConfigurationValidation() throws {
        // Test de validaci√≥n con configuraci√≥n m√≠nima
        // Este test verifica que la validaci√≥n funciona incluso con configuraciones b√°sicas
        
        let issues = SecurityConfiguration.validateConfiguration()
        XCTAssertNotNil(issues, "La validaci√≥n debe funcionar con cualquier configuraci√≥n")
    }
    
    func testAllSeverityLevels() throws {
        // Test de todos los niveles de severidad
        let severities: [SecurityIssueSeverity] = [.low, .medium, .high, .critical]
        
        for severity in severities {
            let issue = SecurityValidationIssue(
                severity: severity,
                category: .authentication,
                message: "Test \(severity)",
                recommendation: "Fix \(severity)"
            )
            
            XCTAssertEqual(issue.severity, severity, "La severidad debe coincidir")
            XCTAssertNotNil(issue.severity, "Cada severidad debe ser v√°lida")
        }
    }
    
    func testAllCategories() throws {
        // Test de todas las categor√≠as
        let categories: [SecurityIssueCategory] = [
            .authentication, .encryption, .auditing, .device, .network, .privacy, .development
        ]
        
        for category in categories {
            let issue = SecurityValidationIssue(
                severity: .medium,
                category: category,
                message: "Test \(category)",
                recommendation: "Fix \(category)"
            )
            
            XCTAssertEqual(issue.category, category, "La categor√≠a debe coincidir")
            XCTAssertFalse(issue.category.description.isEmpty, "Cada categor√≠a debe tener una descripci√≥n")
        }
    }
}
