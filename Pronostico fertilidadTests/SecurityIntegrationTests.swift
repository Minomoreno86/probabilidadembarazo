//
//  SecurityIntegrationTests.swift
//  Pronostico fertilidadTests
//
//  Tests de integraci√≥n del sistema de seguridad
//

import XCTest
@testable import Pronostico_fertilidad

final class SecurityIntegrationTests: XCTestCase {
    
    var securityManager: SecurityManager!
    var secureDefaults: SecureUserDefaults!
    var auditLogger: SecurityAuditLogger!
    
    override func setUpWithError() throws {
        securityManager = SecurityManager.shared
        secureDefaults = SecureUserDefaults.shared
        auditLogger = SecurityAuditLogger.shared
        
        // Limpiar datos de prueba
        secureDefaults.clearAllData()
    }
    
    override func tearDownWithError() throws {
        // Limpiar despu√©s de cada test
        secureDefaults.clearAllData()
        securityManager.secureWipe()
    }
    
    // MARK: - üîó TESTS DE INTEGRACI√ìN COMPLETA
    
    func testCompleteSecurityWorkflow() throws {
        // Test del flujo completo de seguridad
        let testUserID = "integration_test_user_123"
        let testEmail = "integration@test.com"
        let testName = "Usuario de Prueba de Integraci√≥n"
        let testMedicalData = "Datos m√©dicos sensibles del paciente"
        
        // 1. Log de inicio de sesi√≥n
        auditLogger.logUserAuthentication(
            userID: testUserID,
            method: "Integration Test",
            success: true
        )
        
        // 2. Almacenar datos m√©dicos de forma segura
        secureDefaults.secureAppleUserID = testUserID
        secureDefaults.secureUserEmail = testEmail
        secureDefaults.secureUserFullName = testName
        
        // 3. Encriptar datos m√©dicos adicionales
        let encryptedMedicalData = securityManager.encryptString(testMedicalData)
        XCTAssertNotNil(encryptedMedicalData, "Los datos m√©dicos deben encriptarse")
        
        // 4. Log de acceso a datos m√©dicos
        auditLogger.logMedicalDataAccess(
            operation: "store_medical_data",
            dataType: "patient_information",
            userID: testUserID,
            success: true
        )
        
        // 5. Verificar que los datos se almacenaron correctamente
        let retrievedUserID = secureDefaults.secureAppleUserID
        let retrievedEmail = secureDefaults.secureUserEmail
        let retrievedName = secureDefaults.secureUserFullName
        
        XCTAssertEqual(retrievedUserID, testUserID, "El User ID debe recuperarse correctamente")
        XCTAssertEqual(retrievedEmail, testEmail, "El email debe recuperarse correctamente")
        XCTAssertEqual(retrievedName, testName, "El nombre debe recuperarse correctamente")
        
        // 6. Verificar que los datos est√°n encriptados en UserDefaults
        let rawUserID = UserDefaults.standard.string(forKey: "secure_appleUserID")
        let rawEmail = UserDefaults.standard.string(forKey: "secure_userEmail")
        let rawName = UserDefaults.standard.string(forKey: "secure_userFullName")
        
        XCTAssertNotEqual(rawUserID, testUserID, "El User ID en UserDefaults debe estar encriptado")
        XCTAssertNotEqual(rawEmail, testEmail, "El email en UserDefaults debe estar encriptado")
        XCTAssertNotEqual(rawName, testName, "El nombre en UserDefaults debe estar encriptado")
        
        // 7. Verificar integridad de los datos m√©dicos
        let isIntegrityValid = secureDefaults.verifyMedicalDataIntegrity()
        XCTAssertTrue(isIntegrityValid, "La integridad de los datos m√©dicos debe ser v√°lida")
        
        // 8. Log de cierre de sesi√≥n
        auditLogger.logUserAuthentication(
            userID: testUserID,
            method: "Integration Test Logout",
            success: true
        )
        
        XCTAssertTrue(true, "El flujo completo de seguridad debe ejecutarse sin errores")
    }
    
    func testSecurityComponentsInteraction() throws {
        // Test de interacci√≥n entre componentes de seguridad
        
        // 1. SecurityManager genera clave de encriptaci√≥n
        let testData = "Datos de prueba para interacci√≥n".data(using: .utf8)!
        let encryptedData = securityManager.encryptData(testData)
        XCTAssertNotNil(encryptedData, "SecurityManager debe encriptar datos")
        
        // 2. SecureUserDefaults usa SecurityManager para encriptar
        let testString = "String de prueba para interacci√≥n"
        secureDefaults.secureAppleUserID = testString
        
        // 3. Verificar que la encriptaci√≥n funcion√≥
        let retrievedString = secureDefaults.secureAppleUserID
        XCTAssertEqual(retrievedString, testString, "SecureUserDefaults debe desencriptar correctamente")
        
        // 4. SecurityAuditLogger registra la operaci√≥n
        auditLogger.logMedicalDataAccess(
            operation: "test_interaction",
            dataType: "test_data",
            userID: "test_user",
            success: true
        )
        
        // 5. Verificar que todos los componentes funcionan juntos
        let isDeviceSecure = securityManager.isDeviceSecure()
        let deviceStatus = secureDefaults.getDeviceSecurityStatus()
        let criticalLogs = auditLogger.getCriticalEventLogs()
        
        // Solo verificamos que no hay errores
        XCTAssertNotNil(deviceStatus, "El estado del dispositivo debe obtenerse")
        XCTAssertNotNil(criticalLogs, "Los logs cr√≠ticos deben obtenerse")
        
        XCTAssertTrue(true, "Todos los componentes de seguridad deben interactuar correctamente")
    }
    
    func testSecurityPolicyEnforcement() throws {
        // Test de aplicaci√≥n de pol√≠ticas de seguridad
        
        // 1. Verificar pol√≠ticas de encriptaci√≥n
        XCTAssertEqual(SecurityConfiguration.encryptionAlgorithm, "AES-256-GCM", "El algoritmo debe ser AES-256-GCM")
        XCTAssertEqual(SecurityConfiguration.encryptionKeySize, 256, "El tama√±o de clave debe ser 256 bits")
        
        // 2. Verificar pol√≠ticas de autenticaci√≥n
        XCTAssertTrue(SecurityConfiguration.requireBiometricForMedicalData, "Debe requerir autenticaci√≥n biom√©trica")
        XCTAssertFalse(SecurityConfiguration.allowSimulatorUsage, "No debe permitir uso en simulador")
        
        // 3. Verificar pol√≠ticas de auditor√≠a
        XCTAssertTrue(SecurityConfiguration.enableAuditLogging, "Debe habilitar logging de auditor√≠a")
        XCTAssertTrue(SecurityConfiguration.encryptAuditLogs, "Debe encriptar logs de auditor√≠a")
        
        // 4. Verificar pol√≠ticas de privacidad
        XCTAssertFalse(SecurityConfiguration.shareDataWithThirdParties, "No debe compartir datos con terceros")
        XCTAssertTrue(SecurityConfiguration.requireExplicitMedicalDataConsent, "Debe requerir consentimiento expl√≠cito")
        
        // 5. Verificar cumplimiento regulatorio
        let isHIPAACompliant = SecurityConfiguration.isHIPAACompliant()
        let isGDPRCompliant = SecurityConfiguration.isGDPRCompliant()
        
        XCTAssertTrue(isHIPAACompliant, "Debe cumplir con HIPAA")
        XCTAssertTrue(isGDPRCompliant, "Debe cumplir con GDPR")
        
        XCTAssertTrue(true, "Todas las pol√≠ticas de seguridad deben aplicarse correctamente")
    }
    
    // MARK: - üîê TESTS DE ENCRIPTACI√ìN INTEGRADA
    
    func testIntegratedEncryptionWorkflow() throws {
        // Test del flujo completo de encriptaci√≥n integrado
        
        // 1. Datos m√©dicos complejos
        let medicalProfile: [String: Any] = [
            "patientID": "P12345",
            "diagnosis": "Problemas de fertilidad",
            "testResults": [
                "AMH": "2.1 ng/mL",
                "FSH": "8.5 mIU/mL",
                "Estradiol": "45 pg/mL"
            ],
            "treatmentHistory": [
                "2023": "3 ciclos de IUI",
                "2024": "1 ciclo de IVF"
            ]
        ]
        
        // 2. Proteger datos m√©dicos usando SecurityManager
        let protectedData = securityManager.protectMedicalData(medicalProfile)
        XCTAssertNotNil(protectedData, "Los datos m√©dicos deben protegerse")
        
        // 3. Verificar que los valores sensibles est√°n encriptados
        if let protectedPatientID = protectedData?["patientID"] as? String {
            XCTAssertNotEqual(protectedPatientID, "P12345", "El ID del paciente debe estar encriptado")
        }
        
        // 4. Desproteger datos m√©dicos
        let unprotectedData = securityManager.unprotectMedicalData(protectedData!)
        XCTAssertNotNil(unprotectedData, "Los datos m√©dicos deben desprotegerse")
        
        // 5. Verificar que los datos originales se recuperan
        XCTAssertEqual(unprotectedData?["patientID"] as? String, "P12345", "El ID del paciente debe recuperarse")
        XCTAssertEqual(unprotectedData?["diagnosis"] as? String, "Problemas de fertilidad", "El diagn√≥stico debe recuperarse")
        
        // 6. Log de la operaci√≥n de encriptaci√≥n
        auditLogger.logMedicalDataAccess(
            operation: "encrypt_medical_profile",
            dataType: "patient_profile",
            userID: "test_user",
            success: true
        )
        
        XCTAssertTrue(true, "El flujo de encriptaci√≥n integrado debe funcionar correctamente")
    }
    
    // MARK: - üîç TESTS DE AUDITOR√çA INTEGRADA
    
    func testIntegratedAuditWorkflow() throws {
        // Test del flujo completo de auditor√≠a integrado
        
        let testUserID = "audit_test_user"
        let testOperation = "comprehensive_audit_test"
        
        // 1. Simular m√∫ltiples operaciones de seguridad
        for i in 1...5 {
            // Autenticaci√≥n
            auditLogger.logUserAuthentication(
                userID: testUserID,
                method: "Test Method \(i)",
                success: i % 2 == 0 // Alternar √©xito/fallo
            )
            
            // Acceso a datos m√©dicos
            auditLogger.logMedicalDataAccess(
                operation: "\(testOperation)_\(i)",
                dataType: "test_data_type",
                userID: testUserID,
                success: true
            )
            
            // Cambios de configuraci√≥n
            auditLogger.logSecurityConfigurationChange(
                change: "test_change_\(i)",
                userID: testUserID,
                success: true
            )
        }
        
        // 2. Simular algunos eventos cr√≠ticos
        auditLogger.logUnauthorizedAccess(
            operation: "test_unauthorized_access",
            dataType: "test_data",
            userID: testUserID,
            reason: "Testing critical event detection"
        )
        
        auditLogger.logEncryptionError(
            operation: "test_encryption_error",
            error: "Test encryption error for audit",
            userID: testUserID
        )
        
        // 3. Recuperar logs de auditor√≠a
        let fromDate = Date().addingTimeInterval(-3600) // √öltima hora
        let toDate = Date()
        let auditLogs = auditLogger.getAuditLogs(from: fromDate, to: toDate)
        
        // 4. Recuperar logs de eventos cr√≠ticos
        let criticalLogs = auditLogger.getCriticalEventLogs()
        
        // Verificar que la auditor√≠a funciona
        XCTAssertNotNil(auditLogs, "Los logs de auditor√≠a deben recuperarse")
        XCTAssertNotNil(criticalLogs, "Los logs cr√≠ticos deben recuperarse")
        
        XCTAssertTrue(true, "El flujo de auditor√≠a integrado debe funcionar correctamente")
    }
    
    // MARK: - üßπ TESTS DE LIMPIEZA INTEGRADA
    
    func testIntegratedCleanupWorkflow() throws {
        // Test del flujo completo de limpieza integrado
        
        // 1. Crear datos de prueba
        let testUserID = "cleanup_test_user"
        let testEmail = "cleanup@test.com"
        let testName = "Usuario de Limpieza"
        
        secureDefaults.secureAppleUserID = testUserID
        secureDefaults.secureUserEmail = testEmail
        secureDefaults.secureUserFullName = testName
        
        // 2. Verificar que los datos existen
        XCTAssertNotNil(secureDefaults.secureAppleUserID, "Los datos deben existir antes de la limpieza")
        
        // 3. Limpiar solo datos m√©dicos
        secureDefaults.clearMedicalData()
        
        // 4. Verificar que los datos m√©dicos se limpiaron
        XCTAssertNil(secureDefaults.secureAppleUserID, "Los datos m√©dicos deben limpiarse")
        XCTAssertNil(secureDefaults.secureUserEmail, "Los datos m√©dicos deben limpiarse")
        XCTAssertNil(secureDefaults.secureUserFullName, "Los datos m√©dicos deben limpiarse")
        
        // 5. Log de la operaci√≥n de limpieza
        auditLogger.logSecurityConfigurationChange(
            change: "medical_data_cleanup",
            userID: testUserID,
            success: true
        )
        
        // 6. Limpieza completa del SecurityManager
        securityManager.secureWipe()
        
        // 7. Verificar que la clave se regenera autom√°ticamente
        let testString = "Test despu√©s de limpieza"
        let encryptedString = securityManager.encryptString(testString)
        XCTAssertNotNil(encryptedString, "Debe poder encriptar despu√©s de la limpieza (clave regenerada)")
        
        // 8. Verificar que es una nueva clave (diferente resultado)
        let testString2 = "Test despu√©s de limpieza 2"
        let encryptedString2 = securityManager.encryptString(testString2)
        XCTAssertNotNil(encryptedString2, "Debe poder encriptar con la nueva clave")
        XCTAssertNotEqual(encryptedString, encryptedString2, "Las encriptaciones deben ser diferentes")
        
        XCTAssertTrue(true, "El flujo de limpieza integrado debe funcionar correctamente")
    }
    
    // MARK: - üö® TESTS DE CASOS EXTREMOS INTEGRADOS
    
    func testExtremeCasesIntegration() throws {
        // Test de casos extremos con todos los componentes integrados
        
        // 1. String muy largo con caracteres especiales
        let extremeString = String(repeating: "¬°Hola! ¬øC√≥mo est√°s? @#$%^&*()_+-=[]{}|;':\",./<>? üè•üíä ", count: 50)
        
        // Encriptar
        let encryptedExtreme = securityManager.encryptString(extremeString)
        XCTAssertNotNil(encryptedExtreme, "El string extremo debe encriptarse")
        
        // Almacenar en SecureUserDefaults
        secureDefaults.secureUserFullName = extremeString
        
        // Recuperar
        let retrievedExtreme = secureDefaults.secureUserFullName
        XCTAssertEqual(retrievedExtreme, extremeString, "El string extremo debe recuperarse correctamente")
        
        // 2. Log de operaci√≥n extrema
        auditLogger.logMedicalDataAccess(
            operation: "extreme_case_test",
            dataType: "extreme_data",
            userID: "extreme_user",
            success: true
        )
        
        // 3. Verificar integridad
        let isIntegrityValid = secureDefaults.verifyMedicalDataIntegrity()
        XCTAssertTrue(isIntegrityValid, "La integridad debe mantenerse con casos extremos")
        
        XCTAssertTrue(true, "Los casos extremos deben manejarse correctamente por todos los componentes")
    }
    
    func testHighVolumeIntegration() throws {
        // Test de alto volumen con todos los componentes integrados
        
        let startTime = Date()
        let testUserID = "volume_test_user"
        
        // 1. Crear muchos logs r√°pidamente
        for i in 1...100 {
            auditLogger.logMedicalDataAccess(
                operation: "volume_test_\(i)",
                dataType: "test_data",
                userID: testUserID,
                success: true
            )
        }
        
        // 2. Encriptar muchos datos
        for i in 1...50 {
            let testData = "Datos de prueba \(i)".data(using: .utf8)!
            let encryptedData = securityManager.encryptData(testData)
            XCTAssertNotNil(encryptedData, "Los datos deben encriptarse en alto volumen")
        }
        
        // 3. Almacenar muchos datos en SecureUserDefaults
        for i in 1...25 {
            secureDefaults.secureAppleUserID = "user_\(i)"
            let retrievedID = secureDefaults.secureAppleUserID
            XCTAssertEqual(retrievedID, "user_\(i)", "Los datos deben almacenarse correctamente en alto volumen")
        }
        
        let endTime = Date()
        let executionTime = endTime.timeIntervalSince(startTime)
        
        // Verificar que el alto volumen no toma demasiado tiempo
        XCTAssertLessThan(executionTime, 10.0, "El alto volumen debe completarse en menos de 10 segundos")
        
        XCTAssertTrue(true, "El alto volumen debe manejarse correctamente por todos los componentes")
    }
}
